<?php
/**
 * TimeEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Time
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Time API
 *
 * ConnectWise Time API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Time\Model;

use \ArrayAccess;

/**
 * TimeEntry Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Time
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TimeEntry implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TimeEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company' => '\Spinen\ConnectWise\Clients\Time\Model\CompanyReference',
        'charge_to_id' => 'int',
        'charge_to_type' => 'string',
        'member' => '\Spinen\ConnectWise\Clients\Time\Model\MemberReference',
        'location_id' => 'int',
        'business_unit_id' => 'int',
        'work_type' => '\Spinen\ConnectWise\Clients\Time\Model\WorkTypeReference',
        'work_role' => '\Spinen\ConnectWise\Clients\Time\Model\WorkRoleReference',
        'agreement' => '\Spinen\ConnectWise\Clients\Time\Model\AgreementReference',
        'time_start' => '\DateTime',
        'time_end' => '\DateTime',
        'hours_deduct' => 'double',
        'actual_hours' => 'double',
        'billable_option' => 'string',
        'notes' => 'string',
        'internal_notes' => 'string',
        'add_to_detail_description_flag' => 'bool',
        'add_to_internal_analysis_flag' => 'bool',
        'add_to_resolution_flag' => 'bool',
        'email_resource_flag' => 'bool',
        'email_contact_flag' => 'bool',
        'email_cc_flag' => 'bool',
        'email_cc' => 'string',
        'hours_billed' => 'double',
        'entered_by' => 'string',
        'date_entered' => '\DateTime',
        'invoice' => '\Spinen\ConnectWise\Clients\Time\Model\InvoiceReference',
        'hourly_rate' => 'double',
        '_info' => '\Spinen\ConnectWise\Clients\Time\Model\Metadata',
        'custom_fields' => '\Spinen\ConnectWise\Clients\Time\Model\CustomFieldValue[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company' => 'company',
        'charge_to_id' => 'chargeToId',
        'charge_to_type' => 'chargeToType',
        'member' => 'member',
        'location_id' => 'locationId',
        'business_unit_id' => 'businessUnitId',
        'work_type' => 'workType',
        'work_role' => 'workRole',
        'agreement' => 'agreement',
        'time_start' => 'timeStart',
        'time_end' => 'timeEnd',
        'hours_deduct' => 'hoursDeduct',
        'actual_hours' => 'actualHours',
        'billable_option' => 'billableOption',
        'notes' => 'notes',
        'internal_notes' => 'internalNotes',
        'add_to_detail_description_flag' => 'addToDetailDescriptionFlag',
        'add_to_internal_analysis_flag' => 'addToInternalAnalysisFlag',
        'add_to_resolution_flag' => 'addToResolutionFlag',
        'email_resource_flag' => 'emailResourceFlag',
        'email_contact_flag' => 'emailContactFlag',
        'email_cc_flag' => 'emailCcFlag',
        'email_cc' => 'emailCc',
        'hours_billed' => 'hoursBilled',
        'entered_by' => 'enteredBy',
        'date_entered' => 'dateEntered',
        'invoice' => 'invoice',
        'hourly_rate' => 'hourlyRate',
        '_info' => '_info',
        'custom_fields' => 'customFields'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company' => 'setCompany',
        'charge_to_id' => 'setChargeToId',
        'charge_to_type' => 'setChargeToType',
        'member' => 'setMember',
        'location_id' => 'setLocationId',
        'business_unit_id' => 'setBusinessUnitId',
        'work_type' => 'setWorkType',
        'work_role' => 'setWorkRole',
        'agreement' => 'setAgreement',
        'time_start' => 'setTimeStart',
        'time_end' => 'setTimeEnd',
        'hours_deduct' => 'setHoursDeduct',
        'actual_hours' => 'setActualHours',
        'billable_option' => 'setBillableOption',
        'notes' => 'setNotes',
        'internal_notes' => 'setInternalNotes',
        'add_to_detail_description_flag' => 'setAddToDetailDescriptionFlag',
        'add_to_internal_analysis_flag' => 'setAddToInternalAnalysisFlag',
        'add_to_resolution_flag' => 'setAddToResolutionFlag',
        'email_resource_flag' => 'setEmailResourceFlag',
        'email_contact_flag' => 'setEmailContactFlag',
        'email_cc_flag' => 'setEmailCcFlag',
        'email_cc' => 'setEmailCc',
        'hours_billed' => 'setHoursBilled',
        'entered_by' => 'setEnteredBy',
        'date_entered' => 'setDateEntered',
        'invoice' => 'setInvoice',
        'hourly_rate' => 'setHourlyRate',
        '_info' => 'setInfo',
        'custom_fields' => 'setCustomFields'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company' => 'getCompany',
        'charge_to_id' => 'getChargeToId',
        'charge_to_type' => 'getChargeToType',
        'member' => 'getMember',
        'location_id' => 'getLocationId',
        'business_unit_id' => 'getBusinessUnitId',
        'work_type' => 'getWorkType',
        'work_role' => 'getWorkRole',
        'agreement' => 'getAgreement',
        'time_start' => 'getTimeStart',
        'time_end' => 'getTimeEnd',
        'hours_deduct' => 'getHoursDeduct',
        'actual_hours' => 'getActualHours',
        'billable_option' => 'getBillableOption',
        'notes' => 'getNotes',
        'internal_notes' => 'getInternalNotes',
        'add_to_detail_description_flag' => 'getAddToDetailDescriptionFlag',
        'add_to_internal_analysis_flag' => 'getAddToInternalAnalysisFlag',
        'add_to_resolution_flag' => 'getAddToResolutionFlag',
        'email_resource_flag' => 'getEmailResourceFlag',
        'email_contact_flag' => 'getEmailContactFlag',
        'email_cc_flag' => 'getEmailCcFlag',
        'email_cc' => 'getEmailCc',
        'hours_billed' => 'getHoursBilled',
        'entered_by' => 'getEnteredBy',
        'date_entered' => 'getDateEntered',
        'invoice' => 'getInvoice',
        'hourly_rate' => 'getHourlyRate',
        '_info' => 'getInfo',
        'custom_fields' => 'getCustomFields'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CHARGE_TO_TYPE_SERVICE_TICKET = 'ServiceTicket';
    const CHARGE_TO_TYPE_PROJECT_TICKET = 'ProjectTicket';
    const CHARGE_TO_TYPE_CHARGE_CODE = 'ChargeCode';
    const CHARGE_TO_TYPE_ACTIVITY = 'Activity';
    const BILLABLE_OPTION_BILLABLE = 'Billable';
    const BILLABLE_OPTION_DO_NOT_BILL = 'DoNotBill';
    const BILLABLE_OPTION_NO_CHARGE = 'NoCharge';
    const BILLABLE_OPTION_NO_DEFAULT = 'NoDefault';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getChargeToTypeAllowableValues()
    {
        return [
            self::CHARGE_TO_TYPE_SERVICE_TICKET,
            self::CHARGE_TO_TYPE_PROJECT_TICKET,
            self::CHARGE_TO_TYPE_CHARGE_CODE,
            self::CHARGE_TO_TYPE_ACTIVITY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillableOptionAllowableValues()
    {
        return [
            self::BILLABLE_OPTION_BILLABLE,
            self::BILLABLE_OPTION_DO_NOT_BILL,
            self::BILLABLE_OPTION_NO_CHARGE,
            self::BILLABLE_OPTION_NO_DEFAULT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['charge_to_id'] = isset($data['charge_to_id']) ? $data['charge_to_id'] : null;
        $this->container['charge_to_type'] = isset($data['charge_to_type']) ? $data['charge_to_type'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['work_type'] = isset($data['work_type']) ? $data['work_type'] : null;
        $this->container['work_role'] = isset($data['work_role']) ? $data['work_role'] : null;
        $this->container['agreement'] = isset($data['agreement']) ? $data['agreement'] : null;
        $this->container['time_start'] = isset($data['time_start']) ? $data['time_start'] : null;
        $this->container['time_end'] = isset($data['time_end']) ? $data['time_end'] : null;
        $this->container['hours_deduct'] = isset($data['hours_deduct']) ? $data['hours_deduct'] : null;
        $this->container['actual_hours'] = isset($data['actual_hours']) ? $data['actual_hours'] : null;
        $this->container['billable_option'] = isset($data['billable_option']) ? $data['billable_option'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['add_to_detail_description_flag'] = isset($data['add_to_detail_description_flag']) ? $data['add_to_detail_description_flag'] : null;
        $this->container['add_to_internal_analysis_flag'] = isset($data['add_to_internal_analysis_flag']) ? $data['add_to_internal_analysis_flag'] : null;
        $this->container['add_to_resolution_flag'] = isset($data['add_to_resolution_flag']) ? $data['add_to_resolution_flag'] : null;
        $this->container['email_resource_flag'] = isset($data['email_resource_flag']) ? $data['email_resource_flag'] : null;
        $this->container['email_contact_flag'] = isset($data['email_contact_flag']) ? $data['email_contact_flag'] : null;
        $this->container['email_cc_flag'] = isset($data['email_cc_flag']) ? $data['email_cc_flag'] : null;
        $this->container['email_cc'] = isset($data['email_cc']) ? $data['email_cc'] : null;
        $this->container['hours_billed'] = isset($data['hours_billed']) ? $data['hours_billed'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['date_entered'] = isset($data['date_entered']) ? $data['date_entered'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['hourly_rate'] = isset($data['hourly_rate']) ? $data['hourly_rate'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["ServiceTicket", "ProjectTicket", "ChargeCode", "Activity"];
        if (!in_array($this->container['charge_to_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'charge_to_type', must be one of #{allowed_values}.";
        }

        if ($this->container['time_start'] === null) {
            $invalid_properties[] = "'time_start' can't be null";
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['billable_option'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'billable_option', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["ServiceTicket", "ProjectTicket", "ChargeCode", "Activity"];
        if (!in_array($this->container['charge_to_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['time_start'] === null) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['billable_option'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Time\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Time\Model\CompanyReference $company If chargeToId is not specified, we asume you enter time against the company specified
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets charge_to_id
     * @return int
     */
    public function getChargeToId()
    {
        return $this->container['charge_to_id'];
    }

    /**
     * Sets charge_to_id
     * @param int $charge_to_id If chargeToId is not specified, we asume you enter time against the company specified
     * @return $this
     */
    public function setChargeToId($charge_to_id)
    {
        $this->container['charge_to_id'] = $charge_to_id;

        return $this;
    }

    /**
     * Gets charge_to_type
     * @return string
     */
    public function getChargeToType()
    {
        return $this->container['charge_to_type'];
    }

    /**
     * Sets charge_to_type
     * @param string $charge_to_type If chargeToId is not specified, we asume you enter time against the company specified
     * @return $this
     */
    public function setChargeToType($charge_to_type)
    {
        $allowed_values = array('ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity');
        if (!is_null($charge_to_type) && (!in_array($charge_to_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'charge_to_type', must be one of 'ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity'");
        }
        $this->container['charge_to_type'] = $charge_to_type;

        return $this;
    }

    /**
     * Gets member
     * @return \Spinen\ConnectWise\Clients\Time\Model\MemberReference
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     * @param \Spinen\ConnectWise\Clients\Time\Model\MemberReference $member
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets work_type
     * @return \Spinen\ConnectWise\Clients\Time\Model\WorkTypeReference
     */
    public function getWorkType()
    {
        return $this->container['work_type'];
    }

    /**
     * Sets work_type
     * @param \Spinen\ConnectWise\Clients\Time\Model\WorkTypeReference $work_type
     * @return $this
     */
    public function setWorkType($work_type)
    {
        $this->container['work_type'] = $work_type;

        return $this;
    }

    /**
     * Gets work_role
     * @return \Spinen\ConnectWise\Clients\Time\Model\WorkRoleReference
     */
    public function getWorkRole()
    {
        return $this->container['work_role'];
    }

    /**
     * Sets work_role
     * @param \Spinen\ConnectWise\Clients\Time\Model\WorkRoleReference $work_role
     * @return $this
     */
    public function setWorkRole($work_role)
    {
        $this->container['work_role'] = $work_role;

        return $this;
    }

    /**
     * Gets agreement
     * @return \Spinen\ConnectWise\Clients\Time\Model\AgreementReference
     */
    public function getAgreement()
    {
        return $this->container['agreement'];
    }

    /**
     * Sets agreement
     * @param \Spinen\ConnectWise\Clients\Time\Model\AgreementReference $agreement
     * @return $this
     */
    public function setAgreement($agreement)
    {
        $this->container['agreement'] = $agreement;

        return $this;
    }

    /**
     * Gets time_start
     * @return \DateTime
     */
    public function getTimeStart()
    {
        return $this->container['time_start'];
    }

    /**
     * Sets time_start
     * @param \DateTime $time_start
     * @return $this
     */
    public function setTimeStart($time_start)
    {
        $this->container['time_start'] = $time_start;

        return $this;
    }

    /**
     * Gets time_end
     * @return \DateTime
     */
    public function getTimeEnd()
    {
        return $this->container['time_end'];
    }

    /**
     * Sets time_end
     * @param \DateTime $time_end
     * @return $this
     */
    public function setTimeEnd($time_end)
    {
        $this->container['time_end'] = $time_end;

        return $this;
    }

    /**
     * Gets hours_deduct
     * @return double
     */
    public function getHoursDeduct()
    {
        return $this->container['hours_deduct'];
    }

    /**
     * Sets hours_deduct
     * @param double $hours_deduct
     * @return $this
     */
    public function setHoursDeduct($hours_deduct)
    {
        $this->container['hours_deduct'] = $hours_deduct;

        return $this;
    }

    /**
     * Gets actual_hours
     * @return double
     */
    public function getActualHours()
    {
        return $this->container['actual_hours'];
    }

    /**
     * Sets actual_hours
     * @param double $actual_hours
     * @return $this
     */
    public function setActualHours($actual_hours)
    {
        $this->container['actual_hours'] = $actual_hours;

        return $this;
    }

    /**
     * Gets billable_option
     * @return string
     */
    public function getBillableOption()
    {
        return $this->container['billable_option'];
    }

    /**
     * Sets billable_option
     * @param string $billable_option
     * @return $this
     */
    public function setBillableOption($billable_option)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if (!is_null($billable_option) && (!in_array($billable_option, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'billable_option', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['billable_option'] = $billable_option;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets internal_notes
     * @return string
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     * @param string $internal_notes
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets add_to_detail_description_flag
     * @return bool
     */
    public function getAddToDetailDescriptionFlag()
    {
        return $this->container['add_to_detail_description_flag'];
    }

    /**
     * Sets add_to_detail_description_flag
     * @param bool $add_to_detail_description_flag
     * @return $this
     */
    public function setAddToDetailDescriptionFlag($add_to_detail_description_flag)
    {
        $this->container['add_to_detail_description_flag'] = $add_to_detail_description_flag;

        return $this;
    }

    /**
     * Gets add_to_internal_analysis_flag
     * @return bool
     */
    public function getAddToInternalAnalysisFlag()
    {
        return $this->container['add_to_internal_analysis_flag'];
    }

    /**
     * Sets add_to_internal_analysis_flag
     * @param bool $add_to_internal_analysis_flag
     * @return $this
     */
    public function setAddToInternalAnalysisFlag($add_to_internal_analysis_flag)
    {
        $this->container['add_to_internal_analysis_flag'] = $add_to_internal_analysis_flag;

        return $this;
    }

    /**
     * Gets add_to_resolution_flag
     * @return bool
     */
    public function getAddToResolutionFlag()
    {
        return $this->container['add_to_resolution_flag'];
    }

    /**
     * Sets add_to_resolution_flag
     * @param bool $add_to_resolution_flag
     * @return $this
     */
    public function setAddToResolutionFlag($add_to_resolution_flag)
    {
        $this->container['add_to_resolution_flag'] = $add_to_resolution_flag;

        return $this;
    }

    /**
     * Gets email_resource_flag
     * @return bool
     */
    public function getEmailResourceFlag()
    {
        return $this->container['email_resource_flag'];
    }

    /**
     * Sets email_resource_flag
     * @param bool $email_resource_flag This is an action flag. To update this value use the /service/tickets endpoint automaticEmailResourceFlag field
     * @return $this
     */
    public function setEmailResourceFlag($email_resource_flag)
    {
        $this->container['email_resource_flag'] = $email_resource_flag;

        return $this;
    }

    /**
     * Gets email_contact_flag
     * @return bool
     */
    public function getEmailContactFlag()
    {
        return $this->container['email_contact_flag'];
    }

    /**
     * Sets email_contact_flag
     * @param bool $email_contact_flag This is an action flag. To update this value use the /service/tickets endpoint automaticEmailContactFlag field
     * @return $this
     */
    public function setEmailContactFlag($email_contact_flag)
    {
        $this->container['email_contact_flag'] = $email_contact_flag;

        return $this;
    }

    /**
     * Gets email_cc_flag
     * @return bool
     */
    public function getEmailCcFlag()
    {
        return $this->container['email_cc_flag'];
    }

    /**
     * Sets email_cc_flag
     * @param bool $email_cc_flag This is an action flag. To update this value use the /service/tickets endpoint automaticEmailCcFlag field
     * @return $this
     */
    public function setEmailCcFlag($email_cc_flag)
    {
        $this->container['email_cc_flag'] = $email_cc_flag;

        return $this;
    }

    /**
     * Gets email_cc
     * @return string
     */
    public function getEmailCc()
    {
        return $this->container['email_cc'];
    }

    /**
     * Sets email_cc
     * @param string $email_cc To update this value use the /service/tickets endpoint automaticEmailCc field
     * @return $this
     */
    public function setEmailCc($email_cc)
    {
        $this->container['email_cc'] = $email_cc;

        return $this;
    }

    /**
     * Gets hours_billed
     * @return double
     */
    public function getHoursBilled()
    {
        return $this->container['hours_billed'];
    }

    /**
     * Sets hours_billed
     * @param double $hours_billed
     * @return $this
     */
    public function setHoursBilled($hours_billed)
    {
        $this->container['hours_billed'] = $hours_billed;

        return $this;
    }

    /**
     * Gets entered_by
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     * @param string $entered_by
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets date_entered
     * @return \DateTime
     */
    public function getDateEntered()
    {
        return $this->container['date_entered'];
    }

    /**
     * Sets date_entered
     * @param \DateTime $date_entered
     * @return $this
     */
    public function setDateEntered($date_entered)
    {
        $this->container['date_entered'] = $date_entered;

        return $this;
    }

    /**
     * Gets invoice
     * @return \Spinen\ConnectWise\Clients\Time\Model\InvoiceReference
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     * @param \Spinen\ConnectWise\Clients\Time\Model\InvoiceReference $invoice
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets hourly_rate
     * @return double
     */
    public function getHourlyRate()
    {
        return $this->container['hourly_rate'];
    }

    /**
     * Sets hourly_rate
     * @param double $hourly_rate This field may only be Updated, it is defaulted on Create
     * @return $this
     */
    public function setHourlyRate($hourly_rate)
    {
        $this->container['hourly_rate'] = $hourly_rate;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Time\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Time\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Gets custom_fields
     * @return \Spinen\ConnectWise\Clients\Time\Model\CustomFieldValue[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Spinen\ConnectWise\Clients\Time\Model\CustomFieldValue[] $custom_fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Time\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Time\ObjectSerializer::sanitizeForSerialization($this));
    }
}


